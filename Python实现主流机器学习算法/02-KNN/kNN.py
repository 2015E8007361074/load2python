# coding=utf-8"""Create on July 25,2016kNN:k Nearest Neighbors@author:Wayne"""from numpy import *import operator  # 运算符模块def create_data_set():    group = array([[1.0, 1.1], [1.0, 1.0], [0, 0], [0, 0.1]])    labels = ['A', 'A', 'B', 'B']    return group, labelsdef classify0(inx, data_set, labels, k):    data_set_size = data_set.shape[0]    diff_mat = tile(inx, (data_set_size, 1)) - data_set  # tile实现重复AB次    sq_diff_mat = diff_mat ** 2    # print sq_diff_mat    sq_distance = sq_diff_mat.sum(axis=1)  # sum(axis =1)讲矩阵的每一行相加    # print sq_distance    distances = sq_distance ** 0.5    # print distances    sorted_dist_indicies = distances.argsort()  # argsort()函数返回数组从小到大的索引值    # print sorted_dist_indicies    class_count = {}    for i in range(k):        vote_i_label = labels[sorted_dist_indicies[i]]        class_count[vote_i_label] = class_count.get(vote_i_label, 0) + 1    # print class_count    sorted_class_count = sorted(class_count.iteritems(), key=operator.itemgetter(1), reverse=True)    return sorted_class_count[0][0]def file2matrix(filename):    fr = open(filename)    arrayOLines = fr.readlines()    numberOfLines = len(arrayOLines)  # 得到文件的行数    returnMat = zeros((numberOfLines, 3))  # 创建返回的NumPy矩阵    classLabelVector = []    index = 0    for line in arrayOLines:        line = line.strip()        listFromLine = line.split('\t')        returnMat[index, :] = listFromLine[0: 3]        classLabelVector.append(int(listFromLine[-1]))        index += 1    return returnMat, classLabelVector# group, labels = create_data_set()# print group# print labels# print classify0([0, 0], group, labels, 3)datingDataMat,datingLabels = file2matrix('datingTestSet2.txt')print datingDataMatprint datingLabels